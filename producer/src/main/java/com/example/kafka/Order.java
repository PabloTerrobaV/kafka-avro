/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6193143794932215032L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.example.kafka\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"customer_name\",\"type\":\"string\"},{\"name\":\"nationality\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"long\"},{\"name\":\"total_price\",\"type\":\"float\"},{\"name\":\"product\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"quantity\",\"type\":\"int\",\"default\":1},{\"name\":\"discount\",\"type\":\"double\",\"default\":0.0},{\"name\":\"is_gift\",\"type\":\"boolean\",\"default\":false},{\"name\":\"payment_method\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentMethod\",\"namespace\":\"com.example.kafka.PaymentMethod\",\"symbols\":[\"CREDIT_CARD\",\"PAYPAL\",\"CASH\",\"OTHER\"]}},{\"name\":\"order_status\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"namespace\":\"com.example.kafka.OrderStatus\",\"symbols\":[\"PENDING\",\"SHIPPED\",\"DELIVERED\",\"CANCELLED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence customer_name;
  private java.lang.CharSequence nationality;
  private java.lang.CharSequence email;
  private long phone;
  private float total_price;
  private java.lang.CharSequence product;
  private int quantity;
  private double discount;
  private boolean is_gift;
  private com.example.kafka.PaymentMethod.PaymentMethod payment_method;
  private com.example.kafka.OrderStatus.OrderStatus order_status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param customer_name The new value for customer_name
   * @param nationality The new value for nationality
   * @param email The new value for email
   * @param phone The new value for phone
   * @param total_price The new value for total_price
   * @param product The new value for product
   * @param quantity The new value for quantity
   * @param discount The new value for discount
   * @param is_gift The new value for is_gift
   * @param payment_method The new value for payment_method
   * @param order_status The new value for order_status
   */
  public Order(java.lang.CharSequence id, java.lang.CharSequence customer_name, java.lang.CharSequence nationality, java.lang.CharSequence email, java.lang.Long phone, java.lang.Float total_price, java.lang.CharSequence product, java.lang.Integer quantity, java.lang.Double discount, java.lang.Boolean is_gift, com.example.kafka.PaymentMethod.PaymentMethod payment_method, com.example.kafka.OrderStatus.OrderStatus order_status) {
    this.id = id;
    this.customer_name = customer_name;
    this.nationality = nationality;
    this.email = email;
    this.phone = phone;
    this.total_price = total_price;
    this.product = product;
    this.quantity = quantity;
    this.discount = discount;
    this.is_gift = is_gift;
    this.payment_method = payment_method;
    this.order_status = order_status;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return customer_name;
    case 2: return nationality;
    case 3: return email;
    case 4: return phone;
    case 5: return total_price;
    case 6: return product;
    case 7: return quantity;
    case 8: return discount;
    case 9: return is_gift;
    case 10: return payment_method;
    case 11: return order_status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: customer_name = (java.lang.CharSequence)value$; break;
    case 2: nationality = (java.lang.CharSequence)value$; break;
    case 3: email = (java.lang.CharSequence)value$; break;
    case 4: phone = (java.lang.Long)value$; break;
    case 5: total_price = (java.lang.Float)value$; break;
    case 6: product = (java.lang.CharSequence)value$; break;
    case 7: quantity = (java.lang.Integer)value$; break;
    case 8: discount = (java.lang.Double)value$; break;
    case 9: is_gift = (java.lang.Boolean)value$; break;
    case 10: payment_method = (com.example.kafka.PaymentMethod.PaymentMethod)value$; break;
    case 11: order_status = (com.example.kafka.OrderStatus.OrderStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'customer_name' field.
   * @return The value of the 'customer_name' field.
   */
  public java.lang.CharSequence getCustomerName() {
    return customer_name;
  }


  /**
   * Sets the value of the 'customer_name' field.
   * @param value the value to set.
   */
  public void setCustomerName(java.lang.CharSequence value) {
    this.customer_name = value;
  }

  /**
   * Gets the value of the 'nationality' field.
   * @return The value of the 'nationality' field.
   */
  public java.lang.CharSequence getNationality() {
    return nationality;
  }


  /**
   * Sets the value of the 'nationality' field.
   * @param value the value to set.
   */
  public void setNationality(java.lang.CharSequence value) {
    this.nationality = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public long getPhone() {
    return phone;
  }


  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(long value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'total_price' field.
   * @return The value of the 'total_price' field.
   */
  public float getTotalPrice() {
    return total_price;
  }


  /**
   * Sets the value of the 'total_price' field.
   * @param value the value to set.
   */
  public void setTotalPrice(float value) {
    this.total_price = value;
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public java.lang.CharSequence getProduct() {
    return product;
  }


  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(java.lang.CharSequence value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return The value of the 'discount' field.
   */
  public double getDiscount() {
    return discount;
  }


  /**
   * Sets the value of the 'discount' field.
   * @param value the value to set.
   */
  public void setDiscount(double value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'is_gift' field.
   * @return The value of the 'is_gift' field.
   */
  public boolean getIsGift() {
    return is_gift;
  }


  /**
   * Sets the value of the 'is_gift' field.
   * @param value the value to set.
   */
  public void setIsGift(boolean value) {
    this.is_gift = value;
  }

  /**
   * Gets the value of the 'payment_method' field.
   * @return The value of the 'payment_method' field.
   */
  public com.example.kafka.PaymentMethod.PaymentMethod getPaymentMethod() {
    return payment_method;
  }


  /**
   * Sets the value of the 'payment_method' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(com.example.kafka.PaymentMethod.PaymentMethod value) {
    this.payment_method = value;
  }

  /**
   * Gets the value of the 'order_status' field.
   * @return The value of the 'order_status' field.
   */
  public com.example.kafka.OrderStatus.OrderStatus getOrderStatus() {
    return order_status;
  }


  /**
   * Sets the value of the 'order_status' field.
   * @param value the value to set.
   */
  public void setOrderStatus(com.example.kafka.OrderStatus.OrderStatus value) {
    this.order_status = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.example.kafka.Order.Builder newBuilder() {
    return new com.example.kafka.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.example.kafka.Order.Builder newBuilder(com.example.kafka.Order.Builder other) {
    if (other == null) {
      return new com.example.kafka.Order.Builder();
    } else {
      return new com.example.kafka.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.example.kafka.Order.Builder newBuilder(com.example.kafka.Order other) {
    if (other == null) {
      return new com.example.kafka.Order.Builder();
    } else {
      return new com.example.kafka.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence customer_name;
    private java.lang.CharSequence nationality;
    private java.lang.CharSequence email;
    private long phone;
    private float total_price;
    private java.lang.CharSequence product;
    private int quantity;
    private double discount;
    private boolean is_gift;
    private com.example.kafka.PaymentMethod.PaymentMethod payment_method;
    private com.example.kafka.OrderStatus.OrderStatus order_status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.kafka.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[1].schema(), other.customer_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nationality)) {
        this.nationality = data().deepCopy(fields()[2].schema(), other.nationality);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.phone)) {
        this.phone = data().deepCopy(fields()[4].schema(), other.phone);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.total_price)) {
        this.total_price = data().deepCopy(fields()[5].schema(), other.total_price);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.product)) {
        this.product = data().deepCopy(fields()[6].schema(), other.product);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.discount)) {
        this.discount = data().deepCopy(fields()[8].schema(), other.discount);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.is_gift)) {
        this.is_gift = data().deepCopy(fields()[9].schema(), other.is_gift);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.payment_method)) {
        this.payment_method = data().deepCopy(fields()[10].schema(), other.payment_method);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.order_status)) {
        this.order_status = data().deepCopy(fields()[11].schema(), other.order_status);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.kafka.Order other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[1].schema(), other.customer_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nationality)) {
        this.nationality = data().deepCopy(fields()[2].schema(), other.nationality);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.email)) {
        this.email = data().deepCopy(fields()[3].schema(), other.email);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phone)) {
        this.phone = data().deepCopy(fields()[4].schema(), other.phone);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.total_price)) {
        this.total_price = data().deepCopy(fields()[5].schema(), other.total_price);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.product)) {
        this.product = data().deepCopy(fields()[6].schema(), other.product);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.quantity)) {
        this.quantity = data().deepCopy(fields()[7].schema(), other.quantity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.discount)) {
        this.discount = data().deepCopy(fields()[8].schema(), other.discount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.is_gift)) {
        this.is_gift = data().deepCopy(fields()[9].schema(), other.is_gift);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.payment_method)) {
        this.payment_method = data().deepCopy(fields()[10].schema(), other.payment_method);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.order_status)) {
        this.order_status = data().deepCopy(fields()[11].schema(), other.order_status);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerName() {
      return customer_name;
    }


    /**
      * Sets the value of the 'customer_name' field.
      * @param value The value of 'customer_name'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setCustomerName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customer_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_name' field has been set.
      * @return True if the 'customer_name' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customer_name' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearCustomerName() {
      customer_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nationality' field.
      * @return The value.
      */
    public java.lang.CharSequence getNationality() {
      return nationality;
    }


    /**
      * Sets the value of the 'nationality' field.
      * @param value The value of 'nationality'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setNationality(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.nationality = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nationality' field has been set.
      * @return True if the 'nationality' field has been set, false otherwise.
      */
    public boolean hasNationality() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nationality' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearNationality() {
      nationality = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.email = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearEmail() {
      email = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public long getPhone() {
      return phone;
    }


    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setPhone(long value) {
      validate(fields()[4], value);
      this.phone = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearPhone() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_price' field.
      * @return The value.
      */
    public float getTotalPrice() {
      return total_price;
    }


    /**
      * Sets the value of the 'total_price' field.
      * @param value The value of 'total_price'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setTotalPrice(float value) {
      validate(fields()[5], value);
      this.total_price = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'total_price' field has been set.
      * @return True if the 'total_price' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'total_price' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearTotalPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public java.lang.CharSequence getProduct() {
      return product;
    }


    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setProduct(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.product = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearProduct() {
      product = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setQuantity(int value) {
      validate(fields()[7], value);
      this.quantity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearQuantity() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * @return The value.
      */
    public double getDiscount() {
      return discount;
    }


    /**
      * Sets the value of the 'discount' field.
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setDiscount(double value) {
      validate(fields()[8], value);
      this.discount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'discount' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearDiscount() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_gift' field.
      * @return The value.
      */
    public boolean getIsGift() {
      return is_gift;
    }


    /**
      * Sets the value of the 'is_gift' field.
      * @param value The value of 'is_gift'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setIsGift(boolean value) {
      validate(fields()[9], value);
      this.is_gift = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'is_gift' field has been set.
      * @return True if the 'is_gift' field has been set, false otherwise.
      */
    public boolean hasIsGift() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'is_gift' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearIsGift() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_method' field.
      * @return The value.
      */
    public com.example.kafka.PaymentMethod.PaymentMethod getPaymentMethod() {
      return payment_method;
    }


    /**
      * Sets the value of the 'payment_method' field.
      * @param value The value of 'payment_method'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setPaymentMethod(com.example.kafka.PaymentMethod.PaymentMethod value) {
      validate(fields()[10], value);
      this.payment_method = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_method' field has been set.
      * @return True if the 'payment_method' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'payment_method' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearPaymentMethod() {
      payment_method = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_status' field.
      * @return The value.
      */
    public com.example.kafka.OrderStatus.OrderStatus getOrderStatus() {
      return order_status;
    }


    /**
      * Sets the value of the 'order_status' field.
      * @param value The value of 'order_status'.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder setOrderStatus(com.example.kafka.OrderStatus.OrderStatus value) {
      validate(fields()[11], value);
      this.order_status = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'order_status' field has been set.
      * @return True if the 'order_status' field has been set, false otherwise.
      */
    public boolean hasOrderStatus() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'order_status' field.
      * @return This builder.
      */
    public com.example.kafka.Order.Builder clearOrderStatus() {
      order_status = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customer_name = fieldSetFlags()[1] ? this.customer_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.nationality = fieldSetFlags()[2] ? this.nationality : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.email = fieldSetFlags()[3] ? this.email : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.phone = fieldSetFlags()[4] ? this.phone : (java.lang.Long) defaultValue(fields()[4]);
        record.total_price = fieldSetFlags()[5] ? this.total_price : (java.lang.Float) defaultValue(fields()[5]);
        record.product = fieldSetFlags()[6] ? this.product : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.quantity = fieldSetFlags()[7] ? this.quantity : (java.lang.Integer) defaultValue(fields()[7]);
        record.discount = fieldSetFlags()[8] ? this.discount : (java.lang.Double) defaultValue(fields()[8]);
        record.is_gift = fieldSetFlags()[9] ? this.is_gift : (java.lang.Boolean) defaultValue(fields()[9]);
        record.payment_method = fieldSetFlags()[10] ? this.payment_method : (com.example.kafka.PaymentMethod.PaymentMethod) defaultValue(fields()[10]);
        record.order_status = fieldSetFlags()[11] ? this.order_status : (com.example.kafka.OrderStatus.OrderStatus) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.customer_name);

    out.writeString(this.nationality);

    out.writeString(this.email);

    out.writeLong(this.phone);

    out.writeFloat(this.total_price);

    out.writeString(this.product);

    out.writeInt(this.quantity);

    out.writeDouble(this.discount);

    out.writeBoolean(this.is_gift);

    out.writeEnum(this.payment_method.ordinal());

    out.writeEnum(this.order_status.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.customer_name = in.readString(this.customer_name instanceof Utf8 ? (Utf8)this.customer_name : null);

      this.nationality = in.readString(this.nationality instanceof Utf8 ? (Utf8)this.nationality : null);

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.phone = in.readLong();

      this.total_price = in.readFloat();

      this.product = in.readString(this.product instanceof Utf8 ? (Utf8)this.product : null);

      this.quantity = in.readInt();

      this.discount = in.readDouble();

      this.is_gift = in.readBoolean();

      this.payment_method = com.example.kafka.PaymentMethod.PaymentMethod.values()[in.readEnum()];

      this.order_status = com.example.kafka.OrderStatus.OrderStatus.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.customer_name = in.readString(this.customer_name instanceof Utf8 ? (Utf8)this.customer_name : null);
          break;

        case 2:
          this.nationality = in.readString(this.nationality instanceof Utf8 ? (Utf8)this.nationality : null);
          break;

        case 3:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 4:
          this.phone = in.readLong();
          break;

        case 5:
          this.total_price = in.readFloat();
          break;

        case 6:
          this.product = in.readString(this.product instanceof Utf8 ? (Utf8)this.product : null);
          break;

        case 7:
          this.quantity = in.readInt();
          break;

        case 8:
          this.discount = in.readDouble();
          break;

        case 9:
          this.is_gift = in.readBoolean();
          break;

        case 10:
          this.payment_method = com.example.kafka.PaymentMethod.PaymentMethod.values()[in.readEnum()];
          break;

        case 11:
          this.order_status = com.example.kafka.OrderStatus.OrderStatus.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










