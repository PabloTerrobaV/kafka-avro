pipeline {
    agent any  // Ejecuta en cualquier agente disponible

    environment {
        // Variables compartidas
        SCHEMA_REGISTRY_URL = 'http://schema-registry:8081'
        SUBJECT_NAME = 'orders-value'

        // Configuraci√≥n de red (ajustar seg√∫n entorno)
        HOST_IP = "host.docker.internal"  // IP de los servicios
        PRODUCER_PORTS = "8090"    // Puertos de productores (separar por comas)
        CONSUMER_PORTS = "8091"    // Puertos de consumidores (separar por comas)
    }

    stages {
        // √önico stage dedicado a verificar estado de servicios
        stage('Verificar actualizaci√≥n de esquemas') {
            steps {
                echo 'Verificando que el grupo prioritario se haya actualizado...'
                script {
                    // Convertir puertos a listas
                    def producerPorts = PRODUCER_PORTS.split(',').collect { it.trim() }
                    def consumerPorts = CONSUMER_PORTS.split(',').collect { it.trim() }

                    // Obtener configuraci√≥n de compatibilidad actual
                    def compatibility = sh(
                        script: "curl -s ${SCHEMA_REGISTRY_URL}/config/${SUBJECT_NAME} | jq -r '.compatibilityLevel'",
                        returnStdout: true
                    ).trim()
                    echo "Compatibilidad detectada: ${compatibility}"

                    // Determinar qu√© servicios verificar
                    def portsToCheck = []
                    def nextGroup = ""

                    // BACKWARD: Consumidores deben actualizarse primero
                    if (compatibility.startsWith("BACKWARD")) {
                        portsToCheck = consumerPorts
                        nextGroup = "productores"

                    // FORWARD: Productores deben actualizarse primero
                    } else if (compatibility.startsWith("FORWARD")) {
                        portsToCheck = producerPorts
                        nextGroup = "consumidores"

                    // FULL: Ambos deben actualizarse juntos
                    } else if (compatibility.startsWith("FULL")) {
                        portsToCheck = consumerPorts + producerPorts
                        nextGroup = null

                    // Caso desconocido: Verificar todo
                    } else {
                        echo "Compatibilidad desconocida, se verifican todos los servicios..."
                        portsToCheck = consumerPorts + producerPorts
                        nextGroup = null
                    }

                    // Verificar cada servicio
                    def allUpdated = true
                    for (port in portsToCheck) {
                        def response = sh(
                            script: "curl -s http://${HOST_IP}:${port}/schema-status",
                            returnStdout: true
                        ).trim()
                        echo "${HOST_IP}:${port} ‚Üí $response"

                        // Comprobar respuesta del endpoint
                        if (!response.contains("Schema is up-to-date")) {
                            echo "‚ùå El servicio en el puerto $port NO est√° actualizado"
                            allUpdated = false
                        }
                    }

                    // Manejo de errores si alg√∫n servicio falla
                    if (!allUpdated) {
                        error("Al menos un servicio del grupo prioritario tiene un esquema desactualizado.")
                    }

                    echo "‚úÖ Todos los servicios del grupo prioritario est√°n actualizados."

                    // Notificar al grupo secundario si es necesario
                    if (nextGroup != null) {
                        echo "üîî Notificando al grupo secundario (${nextGroup}) para que proceda con la actualizaci√≥n..."
                    } else {
                        echo "üîî No se requiere notificar a un grupo secundario; la actualizaci√≥n es conjunta."
                    }
                }
            }
        }
    }

    // Post-acciones
    post {
        success {
            echo "‚úÖ Verificaci√≥n completada: todos los servicios prioritarios est√°n actualizados."
        }
        failure {
            echo "‚ùå Proceso de verificaci√≥n fallido. Revisar los logs para m√°s detalles."
        }
    }
}